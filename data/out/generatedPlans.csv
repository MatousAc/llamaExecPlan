query,sqlPlan,llamaPlan
select * from student s join attendance a on s.studentID = a.studentID where s.race = 'Black or African American';,"# 1: Clustered Index Scan((attendance AS a),  WHERE:(PROBE(attendanceDB.dbo.attendance.studentID as a.studentID))) # 2: Clustered Index Scan((student AS s),  WHERE:(attendanceDB.dbo.student.race as s.race='Black or African American')) # 3: Hash Match(Inner Join, HASH:(s.studentID)=(a.studentID))","#1 Clustered Index Scan(WHERE: (race = 'Black or African American')) #2 Filter(WHERE: (race = 'Black or African American') AND (s.studentID IN (SELECT attendance.studentID FROM attendance WHERE race = 'Black or African American'))) #3 Inner Join(student s, attendance a ON s.studentID = a.  Sure! Here's the continuation of the execution plan: #4 Nested Loops (Inner Join) (Student s, Attendance a) #5 Hash Match (Student s, Attendance a) #6 Aggregate (Student s, Attendance a)"
"select s.isFemale, s.isHispanic, s.raceCode, st.housingCode, st.gradeLvl, st.credits, st.tensOfHoursWorked, a.distanceToFront, a.seatColumn, a.statusCode, sn.finalGradeCode, sn.finalGrade from attendance a join student s on a.studentID = s.studentID  join studentTerm st on s.studentID = st.studentID join studentSection sn on s.studentID = sn.studentID and sn.termID = st.termID join section n on sn.sectionID = n.sectionID join event e on n.sectionID = e.sectionID and e.eventID = a.eventID join course c on n.courseID = c.courseID where c.departmentID != 'NRSG' and c.departmentID != 'PEAC';","# 1: Clustered Index Scan((attendance AS a),  WHERE:(PROBE(attendanceDB.dbo.attendance.eventID as a.eventID))) # 2: Clustered Index Scan((event AS e),  WHERE:(PROBE(attendanceDB.dbo.event.sectionID as e.sectionID))) # 3: Clustered Index Scan(section AS n) # 4: Clustered Index Scan((course AS c),  WHERE:(attendanceDB.dbo.course.departmentID as c.departmentID<>'NRSG' AND attendanceDB.dbo.course.departmentID as c.departmentID<>'PEAC')) # 5: Hash Match(Inner Join, HASH:(c.courseID)=(n.courseID)) # 6: Hash Match(Inner Join, HASH:(n.sectionID)=(e.sectionID)) # 7: Hash Match(Inner Join, HASH:(e.eventID)=(a.eventID)) # 8: Filter(WHERE:(PROBE(attendanceDB.dbo.event.sectionID as e.sectionID,attendanceDB.dbo.attendance.studentID as a.studentID))) # 9: Clustered Index Scan(studentSection AS sn) # 10: Hash Match(Inner Join, HASH:(sn.sectionID, sn.studentID)=(e.sectionID, a.studentID)) # 11: Clustered Index Scan(studentTerm AS st) # 12: Hash Match(Inner Join, HASH:(st.studentID, st.termID)=(sn.studentID, sn.termID), RESIDUAL:(attendanceDB.dbo.studentTerm.studentID as st.studentID=attendanceDB.dbo.studentSection.studentID as sn.studentID AND attendanceDB.dbo.studentSection.termID as sn.termID=attendanceDB.dbo.studentTerm.termID as st.termID)) # 13: Clustered Index Scan(student AS s) # 14: Hash Match(Inner Join, HASH:(s.studentID)=(sn.studentID))",#1 Clustered Index Scan(WHERE #2 Sort(ORDER BY #3 Merge Join(Inner Join #4 Nested Loops (Join #5 Group By and Aggregation (Aggregate #6 Sort and Limit (Sort #7 Filter (Filter #8 Select (Select
select distinct t.startDate from term t join studentSection ss on t.termID = ss.termID where noAttenceFlag = 'False';,"# 1: Clustered Index Seek((term AS t), SEEK:(t.termID=attendanceDB.dbo.studentSection.termID as ss.termID) ORDERED FORWARD) # 2: Clustered Index Scan((studentSection AS ss), WHERE:(attendanceDB.dbo.studentSection.noAttenceFlag as ss.noAttenceFlag='False')) # 3: Hash Match(Aggregate, HASH:(ss.termID), RESIDUAL:(attendanceDB.dbo.studentSection.termID as ss.termID = attendanceDB.dbo.studentSection.termID as ss.termID)) # 4: Nested Loops(Inner Join, OUTER REFERENCES:(ss.termID)) # 5: Sort(DISTINCT ORDER BY:(t.startDate ASC))","#1 Clustered Index Scan(WHERE: (noAttenceFlag = 'False')) #2 Filter(WHERE: (noAttenceFlag = 'False')) #3 Join the `student` and `studentSection` tables on the `studentID` column: #4 Sort the result set by the `startDate` column in ascending order: #5 Limit the result set to only include rows where the `gender` column is ""Male"": #6 Group the result set by the `raceCode` column and calculate the average `startDate` for each group: #7 Sort the result set in descending order based on the `avg(startDate)` column: #8 Limit the result set to only include rows where the `avg(startDate)` is greater than or equal to a certain value (e.g. 90"
"select s.gender, s.raceCode, s.standardTestScore from student s join studentSection ss on s.studentID = ss.studentID where ss.midtermGrade = 'F' and ss.finalGrade = 'A';","# 1: Clustered Index Scan((studentSection AS ss), WHERE:(attendanceDB.dbo.studentSection.midtermGrade as ss.midtermGrade='F' AND attendanceDB.dbo.studentSection.finalGrade as ss.finalGrade='A')) # 2: Sort(ORDER BY:(ss.studentID ASC)) # 3: Clustered Index Scan((student AS s), ORDERED FORWARD) # 4: Merge Join(Inner Join, MERGE:(s.studentID)=(ss.studentID), RESIDUAL:(attendanceDB.dbo.studentSection.studentID as ss.studentID=attendanceDB.dbo.student.studentID as s.studentID))","#1 Clustered Index Scan(WHERE: (studentSection.midtermGrade = 'F' AND studentSection.finalGrade = 'A'))  #2 Sort(ORDER BY:  Sure! Here's step 3 of the execution plan: #3 Merge Join(Inner Join, MERGE:(student.studentID)=(studentSection.studentID), RESIDUAL:(studentSection.studentID=student.studentID))  #4 Filter(WHERE: (studentSection.midtermGrade = 'F' AND studentSection.finalGrade = 'A'))  #5 Group By(GROUP BY: student.studentID)  #6 Aggregate(AGGREGATE: student.grade = (SELECT avg(grade) FROM grades WHERE studentID = student.studentID)) "
"select s.gender, s.raceCode, s.standardTestScore from student s join studentSection ss on s.studentID = ss.studentID where ss.midtermGrade = 'D' and ss.finalGrade = 'B';","# 1: Clustered Index Scan((studentSection AS ss), WHERE:(attendanceDB.dbo.studentSection.midtermGrade as ss.midtermGrade='D' AND attendanceDB.dbo.studentSection.finalGrade as ss.finalGrade='B')) # 2: Sort(ORDER BY:(ss.studentID ASC)) # 3: Clustered Index Scan((student AS s), ORDERED FORWARD) # 4: Merge Join(Inner Join, MERGE:(s.studentID)=(ss.studentID), RESIDUAL:(attendanceDB.dbo.studentSection.studentID as ss.studentID=attendanceDB.dbo.student.studentID as s.studentID))","#1 Clustered Index Scan(WHERE:(studentSection.midtermGrade='D' AND studentSection.finalGrade='B')) #2 Sort(ORDER BY:(ss.studentID ASC)) #3 Clustered Index Scan(student, ORDERED FORWARD) #4 Merge Join(Inner Join, MERGE:(student.studentID)="
select * from department;,# 1: Clustered Index Scan(department),"#1 Clustered Index Scan(WHERE: (studentSection  Sure! Here's step 2 of the execution plan: #2 Sort(ORDER BY: (ss.studentID ASC)) #3 Clustered Index Scan(student, WHERE: (studentID=ss.studentID)) #4 Inner Join(student, studentSection, ON: (studentID=studentSection.studentID)) #5 Group By(studentSection, studentID, grade) #6 Aggregate(studentSection, grade, COUNT(grade) AS totalGrades) #7 Filter(studentSection, totalGrades > 70)"
select p.professorName from professor p join section s on p.professorID = s.professorID join course c on s.courseID = c.courseID join department d on c.departmentID = d.departmentID where d.departmentName = 'Computing' or d.departmentName = 'Physics';,"# 1: Clustered Index Seek((professor AS p), SEEK:(p.professorID=attendanceDB.dbo.section.professorID as s.professorID) ORDERED FORWARD) # 2: Clustered Index Scan(section AS s) # 3: Clustered Index Seek((department AS d), SEEK:(d.departmentID=attendanceDB.dbo.course.departmentID as c.departmentID),  WHERE:(attendanceDB.dbo.department.departmentName as d.departmentName='Computing' OR attendanceDB.dbo.department.departmentName as d.departmentName='Physics') ORDERED FORWARD) # 4: Clustered Index Scan(course AS c) # 5: Nested Loops(Inner Join, OUTER REFERENCES:(c.departmentID)) # 6: Hash Match(Inner Join, HASH:(c.courseID)=(s.courseID)) # 7: Nested Loops(Inner Join, OUTER REFERENCES:(s.professorID))",
select avg(c.credits) as 'creditAverage' from course c;,"# 1: Clustered Index Scan(course AS c) # 2: Stream Aggregate(DEFINE:(Expr1002=Count(*), Expr1003=SUM(attendanceDB.dbo.course.credits as c.credits))) # 3: Compute Scalar(DEFINE:(Expr1001=CASE WHEN Expr1002=(0) THEN NULL ELSE Expr1003/CONVERT_IMPLICIT(int,Expr1002,0) END))","#1 Clustered Index Scan(WHERE:(studentSection.  Sure! Here's the continuation of the execution plan for the query: #2 Sort(ORDER BY: (ss.midtermGrade ASC, ss.finalGrade ASC))"
"select d.departmentName, avg(c.credits) as 'creditAverage' from course c join department d on c.departmentID = d.departmentID group by d.departmentName;","# 1: Clustered Index Scan(course AS c) # 2: Clustered Index Scan(department AS d) # 3: Sort(ORDER BY:(d.departmentName ASC)) # 4: Nested Loops(Inner Join, WHERE:(attendanceDB.dbo.department.departmentID as d.departmentID=attendanceDB.dbo.course.departmentID as c.departmentID)) # 5: Stream Aggregate(GROUP BY:(d.departmentName) DEFINE:(Expr1007=Count(*), Expr1008=SUM(attendanceDB.dbo.course.credits as c.credits))) # 6: Compute Scalar(DEFINE:(Expr1002=CASE WHEN Expr1007=(0) THEN NULL ELSE Expr1008/CONVERT_IMPLICIT(int,Expr1007,0) END))",
select avg(c.credits) as 'creditAverage' from section se join course c on se.courseID = c.courseID;,"# 1: Clustered Index Scan(section AS se) # 2: Sort(ORDER BY:(se.courseID ASC)) # 3: Clustered Index Scan((course AS c), ORDERED FORWARD) # 4: Merge Join(Inner Join, MERGE:(c.courseID)=(se.courseID), RESIDUAL:(attendanceDB.dbo.course.courseID as c.courseID=attendanceDB.dbo.section.courseID as se.courseID)) # 5: Stream Aggregate(DEFINE:(Expr1007=Count(*), Expr1008=SUM(attendanceDB.dbo.course.credits as c.credits))) # 6: Compute Scalar(DEFINE:(Expr1002=CASE WHEN Expr1007=(0) THEN NULL ELSE Expr1008/CONVERT_IMPLICIT(int,Expr1007,0) END))","#1 Clustered Index Scan(WHERE  Sure! Here's step 2 of the execution plan: #2 Sort(ORDER BY: ss.studentID ASC #3 Clustered Index Seek(WHERE: ss.midtermGrade = 'F' AND ss.finalGrade = 'A' #4 Inner Join(studentSection, student on studentSection.studentID = student.studentID #5 Compute Aggregate Functions(avg(grade), avg(credits), avg(gpa), avg(class), avg(department), avg(major), avg(minor), avg(concentration), avg(award), avg(scholarship), avg(honor) #6 Group By and Summarize(grade, credits, gpa, class, department, major, minor, concentration, award, scholarship, honor #7 Filter and Sort(grade > 80, credits > 15, gpa > 3.5, class in ('A', 'B', 'C'), department in ('CS', 'Math', 'Eng'), major in ('CS', 'Math'), minor in ('CS', 'Eng'), concentration in ('AI', 'DataSci'), award > 500, scholarship"
"select building, roomNumber from room;",# 1: Clustered Index Scan(room),"#1 Clustered Index Scan(WHERE: (studentSection.midtermG  Great! Here's the continuation of the execution plan for step 2: #2 Sort(ORDER BY: (ss.studentID ASC)) #3 Clustered Index Seek(studentSection, studentID = @0) #4 Inner Join(studentSection, student on studentSection.studentID = student.studentID) #5 Compute Scores(studentSection, student) #6 Group By Student(studentSection, student) #7 Order By Student(studentSection, student)"
"select p.professorName, r.roomNumber from professor p join section se on p.professorID = se.professorID join room r on se.roomID = r.roomID where r.building = 'Hickman Science Center';","# 1: Clustered Index Seek((professor AS p), SEEK:(p.professorID=attendanceDB.dbo.section.professorID as se.professorID) ORDERED FORWARD) # 2: Clustered Index Scan(section AS se) # 3: Clustered Index Scan((room AS r), WHERE:(attendanceDB.dbo.room.building as r.building='Hickman Science Center')) # 4: Hash Match(Inner Join, HASH:(r.roomID)=(se.roomID), RESIDUAL:(attendanceDB.dbo.room.roomID as r.roomID=attendanceDB.dbo.section.roomID as se.roomID)) # 5: Nested Loops(Inner Join, OUTER REFERENCES:(se.professorID))","#1 Clustered Index Scan(WHERE:(studentSection.midtermGrade='F' AND studentSection.finalGrade='A'))  #2 Sort(ORDER BY:(ss.studentID ASC))  #3 Merge Join(Inner Join, MERGE:(student.studentID)=(studentSection.studentID), RESIDUAL:(studentSection.studentID=student.studentID))  #4 Compute Scalar(COALESCE(ss.midtermGrade, 'F'))  #5 Filter(ss.midtermGrade = 'A')  #1 Clustered Index Scan(student) #2 Clustered Index Sc  Of course! Here is the continuation of the execution plan for the first query: #6 Project(studentID, gender, major, midtermGrade, finalGrade)  #1 Clustered Index Sc  Sure! Here is the continuation of the execution plan for the first query: #7 Sort(studentID, gender, major, midtermGrade, finalGrade)  #1 Of course! Here is the continuation of the execution plan for the first query: #8 Limit(10)  #1 Clustered Index Scan(student) #2 Clustered Index Scan(student) #3 Project(studentID, gender, major,"
"select p.professorName, r.building, count(r.roomNumber) as 'numberOfRooms' from professor p join section se on p.professorID = se.professorID join room r on se.roomID = r.roomID group by r.building, p.professorName;","# 1: Clustered Index Scan(section AS se) # 2: Clustered Index Scan(room AS r) # 3: Hash Match(Inner Join, HASH:(r.roomID)=(se.roomID), RESIDUAL:(attendanceDB.dbo.room.roomID as r.roomID=attendanceDB.dbo.section.roomID as se.roomID)) # 4: Clustered Index Scan(professor AS p) # 5: Hash Match(Inner Join, HASH:(p.professorID)=(se.professorID)) # 6: Sort(ORDER BY:(p.professorName ASC, r.building ASC)) # 7: Stream Aggregate(GROUP BY:(p.professorName, r.building) DEFINE:(Expr1004=Count(*))) # 8: Compute Scalar(DEFINE:(Expr1003=CONVERT_IMPLICIT(int,Expr1004,0)))","#1 Clustered Index Scan(WHERE: (studentSection.midtermGrade = 'F' AND studentSection.finalGrade = 'A')) #2 Sort(ORDER BY: (ss.studentID ASC  Great! Here is the continuation of the execution plan for the first query: #3 Merge Join(Inner Join, MERGE:(student.studentID)=(studentSection.studentID), RESIDUAL:(studentSection.studentID=student.studentID)) #4 Filter(WHERE: (studentSection.midtermGrade = 'F' AND studentSection.finalGrade = 'A'))"
"select top 5 p.professorName, concat(c.courseCode, '-', se.sectionLetter), avg(sse.finalGradeCode) as 'classGrade' from professor p join section se on p.professorID = se.professorID join studentSection sse on se.sectionID = sse.sectionID join course c on se.courseID = c.courseID group by p.professorName, se.sectionLetter, c.courseCode order by avg(sse.finalGradeCode) asc;","# 1: Clustered Index Scan(studentSection AS sse) # 2: Clustered Index Scan(section AS se) # 3: Clustered Index Scan(professor AS p) # 4: Hash Match(Inner Join, HASH:(p.professorID)=(se.professorID)) # 5: Clustered Index Scan(course AS c) # 6: Hash Match(Inner Join, HASH:(c.courseID)=(se.courseID)) # 7: Hash Match(Inner Join, HASH:(se.sectionID)=(sse.sectionID)) # 8: Hash Match(Aggregate, HASH:(p.professorName, se.sectionLetter, c.courseCode), Expr1007=SUM(attendanceDB.dbo.studentSection.finalGradeCode as sse.finalGradeCode))) # 9: Compute Scalar(DEFINE:(Expr1004=CASE WHEN Expr1006=(0) THEN NULL ELSE Expr1007/CONVERT_IMPLICIT(int,Expr1006,0) END)) # 10: Sort(TOP 5, ORDER BY:(Expr1004 ASC)) # 11: Compute Scalar(DEFINE:(Expr1005=concat(attendanceDB.dbo.course.courseCode as c.courseCode,'-',attendanceDB.dbo.section.sectionLetter as se.sectionLetter)))","#1 Clustered Index Scan(WHERE:(studentSection.midtermGrade='F' AND studentSection.finalGrade='A')) #2  Sure! Here's step 2 of the execution plan: #2 Sort(ORDER BY: studentSection.studentID ASC) #3 Clustered Index Seek(studentSection.studentID = @p1) #4 Merge Join(Inner Join, MERGE:(studentSection.studentID = studentSection.studentID), RESIDUAL:()) #5 Group By(group by: studentSection.professorID, studentSection.courseID, studentSection.sectionLetter) #6 Aggregate  Of course! Here's step 7 of the execution plan: #7 Aggregate(group by: studentSection.professorID, studentSection.courseID, studentSection.sectionLetter, function: AVG(studentSection.finalGrade))"
"select top 5 p.professorName, concat(c.courseCode, '-', se.sectionLetter), avg(sse.finalGradeCode) as 'classGrade' from professor p join section se on p.professorID = se.professorID join studentSection sse on se.sectionID = sse.sectionID join course c on se.courseID = c.courseID group by p.professorName, se.sectionLetter, c.courseCode order by avg(sse.finalGradeCode) desc;","# 1: Clustered Index Scan(studentSection AS sse) # 2: Clustered Index Scan(section AS se) # 3: Clustered Index Scan(professor AS p) # 4: Hash Match(Inner Join, HASH:(p.professorID)=(se.professorID)) # 5: Clustered Index Scan(course AS c) # 6: Hash Match(Inner Join, HASH:(c.courseID)=(se.courseID)) # 7: Hash Match(Inner Join, HASH:(se.sectionID)=(sse.sectionID)) # 8: Hash Match(Aggregate, HASH:(p.professorName, se.sectionLetter, c.courseCode), Expr1007=SUM(attendanceDB.dbo.studentSection.finalGradeCode as sse.finalGradeCode))) # 9: Compute Scalar(DEFINE:(Expr1004=CASE WHEN Expr1006=(0) THEN NULL ELSE Expr1007/CONVERT_IMPLICIT(int,Expr1006,0) END)) # 10: Sort(TOP 5, ORDER BY:(Expr1004 DESC)) # 11: Compute Scalar(DEFINE:(Expr1005=concat(attendanceDB.dbo.course.courseCode as c.courseCode,'-',attendanceDB.dbo.section.sectionLetter as se.sectionLetter)))",#1 Clustered Index Scan(WHERE #2 Sort: #3 Merge Join: #4 Group By and Aggregate: #5 Sort and Limit: #6 Filter and Sort: #7 Group and Summarize: #8 Visualize and Interact:
"select p.professorName, avg(sse.finalGradeCode) as 'avgGrade' from professor p join section se on p.professorID = se.professorID join studentSection sse on se.sectionID = sse.sectionID group by p.professorName;","# 1: Clustered Index Scan(studentSection AS sse) # 2: Clustered Index Scan(section AS se) # 3: Clustered Index Scan(professor AS p) # 4: Hash Match(Inner Join, HASH:(p.professorID)=(se.professorID)) # 5: Hash Match(Inner Join, HASH:(se.sectionID)=(sse.sectionID)) # 6: Hash Match(Aggregate, HASH:(p.professorName), Expr1005=SUM(attendanceDB.dbo.studentSection.finalGradeCode as sse.finalGradeCode))) # 7: Compute Scalar(DEFINE:(Expr1003=CASE WHEN Expr1004=(0) THEN NULL ELSE Expr1005/CONVERT_IMPLICIT(int,Expr1004,0) END))","#1 Clustered  Great! Here's step 2 of the execution plan: #2 Sort(ORDER BY: ss.studentID ASC #3 Merge Join(Inner Join, MERGE:(student.studentID)=(studentSection.studentID) #4 Group By(GROUP BY: student.studentID #5 Aggregate(AGGREGATE: avg(s.grade), FUNCTION: AVG"
