Loading Data . . .
Splitting data . . .
Results:
DatasetDict({
    train: Dataset({
        features: ['sentence', 'answer', 'count'],
        num_rows: 10655
    })
    test: Dataset({
        features: ['sentence', 'answer', 'count'],
        num_rows: 11
    })
})
{'sentence': 'The gross state domestic product (GSDP) of Delhi at current prices for the year 2011-12 has been estimated at Rs 3.13 lakh crore, which is an increase of 18.7 per cent over the previous fiscal.', 'answer': '18.7 <sep> 2011-12 <sep> increase', 'count': 3}
Looking at Logits
All Logits in one:
logits.shape: torch.Size([8, 146, 32000])
tensor([[[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
         [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
         [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
         ...,
         [  1.2821,  31.5577,   1.5331,  ...,  -0.8268,  -1.6325,  -0.3295],
         [  1.1803,  31.1716,   1.5511,  ...,  -0.8479,  -1.6968,  -0.3989],
         [  1.1462,  31.0481,   1.5647,  ...,  -0.8509,  -1.7052,  -0.4039]],

        [[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
         [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
         [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
         ...,
         [  0.8082,  30.1709,   1.6572,  ...,  -0.9026,  -1.2402,  -0.1792],
         [  0.6563,  29.6212,   1.6336,  ...,  -0.9616,  -1.3094,  -0.2667],
         [  0.5524,  29.2924,   1.6346,  ...,  -1.0024,  -1.3724,  -0.3173]],

        [[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
         [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
         [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
         ...,
         [ -3.4573,  -1.6889,  10.1158,  ...,  -0.0752,  -0.8296,  -0.6568],
         [ -6.6210,  -2.7305,   8.3341,  ...,  -1.7472,  -3.4510,  -2.7360],
         [-11.5716,  -7.9036,   5.1624,  ...,  -5.6700,  -7.3094,  -6.6855]],

        ...,

        [[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
         [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
         [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
         ...,
         [  1.6699,  32.9362,   1.6228,  ...,  -0.3829,  -0.5807,  -0.1163],
         [  1.6440,  32.6882,   1.5855,  ...,  -0.3700,  -0.5882,  -0.1435],
         [  1.7393,  32.8814,   1.5556,  ...,  -0.2863,  -0.4896,  -0.0867]],

        [[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
         [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
         [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
         ...,
         [  1.2204,  36.8191,   3.4947,  ...,   0.2762,   0.3763,   0.4885],
         [  1.1645,  36.6791,   3.4619,  ...,   0.2169,   0.3276,   0.4550],
         [  1.1558,  36.5572,   3.4003,  ...,   0.1802,   0.3219,   0.4573]],

        [[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
         [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
         [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
         ...,
         [  0.7080,  31.6590,   1.3815,  ...,  -1.1804,  -1.0761,  -0.8259],
         [  0.6224,  31.2781,   1.4283,  ...,  -1.2048,  -1.1445,  -0.8763],
         [  0.6174,  31.2094,   1.4482,  ...,  -1.2281,  -1.1418,  -0.8903]]],
       device='cuda:0')
Separately:
logit.shape: torch.Size([146, 32000])
tensor([[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
        ...,
        [  1.2821,  31.5577,   1.5331,  ...,  -0.8268,  -1.6325,  -0.3295],
        [  1.1803,  31.1716,   1.5511,  ...,  -0.8479,  -1.6968,  -0.3989],
        [  1.1462,  31.0481,   1.5647,  ...,  -0.8509,  -1.7052,  -0.4039]],
       device='cuda:0')
logit.shape: torch.Size([146, 32000])
tensor([[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
        ...,
        [  0.8082,  30.1709,   1.6572,  ...,  -0.9026,  -1.2402,  -0.1792],
        [  0.6563,  29.6212,   1.6336,  ...,  -0.9616,  -1.3094,  -0.2667],
        [  0.5524,  29.2924,   1.6346,  ...,  -1.0024,  -1.3724,  -0.3173]],
       device='cuda:0')
logit.shape: torch.Size([146, 32000])
tensor([[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
        ...,
        [ -3.4573,  -1.6889,  10.1158,  ...,  -0.0752,  -0.8296,  -0.6568],
        [ -6.6210,  -2.7305,   8.3341,  ...,  -1.7472,  -3.4510,  -2.7360],
        [-11.5716,  -7.9036,   5.1624,  ...,  -5.6700,  -7.3094,  -6.6855]],
       device='cuda:0')
logit.shape: torch.Size([146, 32000])
tensor([[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
        ...,
        [  0.5916,  28.4146,   1.8768,  ...,  -0.7364,  -1.5104,  -0.4333],
        [  0.5291,  28.2118,   1.8962,  ...,  -0.7588,  -1.5647,  -0.4676],
        [  0.6575,  28.6831,   1.8887,  ...,  -0.6868,  -1.4785,  -0.3855]],
       device='cuda:0')
logit.shape: torch.Size([146, 32000])
tensor([[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
        ...,
        [  2.4262,  36.7238,   2.2892,  ...,  -0.3448,  -0.0921,   0.1666],
        [  2.2972,  36.3215,   2.2698,  ...,  -0.4070,  -0.2004,   0.0815],
        [  2.2622,  36.1781,   2.2574,  ...,  -0.4255,  -0.2009,   0.0567]],
       device='cuda:0')
logit.shape: torch.Size([146, 32000])
tensor([[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
        ...,
        [  1.6699,  32.9362,   1.6228,  ...,  -0.3829,  -0.5807,  -0.1163],
        [  1.6440,  32.6882,   1.5855,  ...,  -0.3700,  -0.5882,  -0.1435],
        [  1.7393,  32.8814,   1.5556,  ...,  -0.2863,  -0.4896,  -0.0867]],
       device='cuda:0')
logit.shape: torch.Size([146, 32000])
tensor([[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
        ...,
        [  1.2204,  36.8191,   3.4947,  ...,   0.2762,   0.3763,   0.4885],
        [  1.1645,  36.6791,   3.4619,  ...,   0.2169,   0.3276,   0.4550],
        [  1.1558,  36.5572,   3.4003,  ...,   0.1802,   0.3219,   0.4573]],
       device='cuda:0')
logit.shape: torch.Size([146, 32000])
tensor([[ -1.4463,   2.3857,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0917,  -7.4473],
        ...,
        [  0.7080,  31.6590,   1.3815,  ...,  -1.1804,  -1.0761,  -0.8259],
        [  0.6224,  31.2781,   1.4283,  ...,  -1.2048,  -1.1445,  -0.8763],
        [  0.6174,  31.2094,   1.4482,  ...,  -1.2281,  -1.1418,  -0.8903]],
       device='cuda:0')
Looking at Lables
All Labels in one:
labels.shape: torch.Size([8, 146])
tensor([[ -100,  -100,  -100,  ...,  -100,  -100,  -100],
        [ -100,  -100,  -100,  ...,  -100,  -100,  -100],
        [ -100,  -100,  -100,  ..., 29906, 29947, 29995],
        ...,
        [ -100,  -100,  -100,  ...,  -100,  -100,  -100],
        [ -100,  -100,  -100,  ...,  -100,  -100,  -100],
        [ -100,  -100,  -100,  ...,  -100,  -100,  -100]], device='cuda:0')
Separately:
label.shape: torch.Size([146])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
        29871, 29896, 29929, 29929, 29941,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100], device='cuda:0')
label.shape: torch.Size([146])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,   365, 10312,
          574,   713,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100], device='cuda:0')
label.shape: torch.Size([146])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
        29871, 29900, 29889, 29906, 29947, 29995], device='cuda:0')
label.shape: torch.Size([146])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  7510,  5678, 19627,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100], device='cuda:0')
label.shape: torch.Size([146])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
        29871, 29947,  5846,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100], device='cuda:0')
label.shape: torch.Size([146])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100, 18032,  3631,
        22535,   529, 19570, 29958,   610,   294,   277,   293,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100], device='cuda:0')
label.shape: torch.Size([146])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100, 29871, 29941, 29947, 29900, 29892,
        29900, 29900, 29900,   529, 19570, 29958, 29871, 29946, 29941, 29892,
        29900, 29900, 29900,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100], device='cuda:0')
label.shape: torch.Size([146])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          278, 25812, 12502,   529, 19570, 29958, 25812, 12502,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100], device='cuda:0')
Done w/ Preprocessing Logits
Looking at Logits
All Logits in one:
logits.shape: torch.Size([3, 68, 32000])
tensor([[[ -1.4463,   2.3858,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
         [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
         [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0916,  -7.4473],
         ...,
         [  0.7050,  34.7965,   3.9727,  ...,   0.3011,  -0.3882,   0.7921],
         [  0.6942,  34.8508,   4.0537,  ...,   0.3263,  -0.3738,   0.8269],
         [  0.7134,  35.0379,   4.1480,  ...,   0.3776,  -0.3129,   0.8753]],

        [[ -1.4463,   2.3858,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
         [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
         [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0916,  -7.4473],
         ...,
         [ -2.8405,  -5.9041,  11.6735,  ...,   0.5733,   1.2033,   1.8967],
         [ -7.9850,  -4.4852,   8.1438,  ...,  -2.5761,  -2.8369,  -1.0815],
         [-12.7482, -11.0514,   5.0938,  ...,  -7.2094,  -7.4114,  -7.0337]],

        [[ -1.4463,   2.3858,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
         [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
         [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0916,  -7.4473],
         ...,
         [  1.7337,  33.9196,   1.6161,  ...,  -0.3915,  -0.8471,   0.2526],
         [  1.7385,  33.8230,   1.6151,  ...,  -0.3462,  -0.8213,   0.2774],
         [  1.6463,  33.3430,   1.5773,  ...,  -0.3721,  -0.8775,   0.1938]]],
       device='cuda:0')
Separately:
logit.shape: torch.Size([68, 32000])
tensor([[ -1.4463,   2.3858,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0916,  -7.4473],
        ...,
        [  0.7050,  34.7965,   3.9727,  ...,   0.3011,  -0.3882,   0.7921],
        [  0.6942,  34.8508,   4.0537,  ...,   0.3263,  -0.3738,   0.8269],
        [  0.7134,  35.0379,   4.1480,  ...,   0.3776,  -0.3129,   0.8753]],
       device='cuda:0')
logit.shape: torch.Size([68, 32000])
tensor([[ -1.4463,   2.3858,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0916,  -7.4473],
        ...,
        [ -2.8405,  -5.9041,  11.6735,  ...,   0.5733,   1.2033,   1.8967],
        [ -7.9850,  -4.4852,   8.1438,  ...,  -2.5761,  -2.8369,  -1.0815],
        [-12.7482, -11.0514,   5.0938,  ...,  -7.2094,  -7.4114,  -7.0337]],
       device='cuda:0')
logit.shape: torch.Size([68, 32000])
tensor([[ -1.4463,   2.3858,   1.2089,  ...,   0.8125,   0.3307,   0.1551],
        [ -8.2474,  -5.5157,   1.6776,  ...,  -2.5070,  -5.0926,  -1.3743],
        [-11.3578,  -9.5550,  -1.9142,  ...,  -4.8353,  -7.0916,  -7.4473],
        ...,
        [  1.7337,  33.9196,   1.6161,  ...,  -0.3915,  -0.8471,   0.2526],
        [  1.7385,  33.8230,   1.6151,  ...,  -0.3462,  -0.8213,   0.2774],
        [  1.6463,  33.3430,   1.5773,  ...,  -0.3721,  -0.8775,   0.1938]],
       device='cuda:0')
Looking at Lables
All Labels in one:
labels.shape: torch.Size([3, 68])
tensor([[ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  4047, 29895,   529, 19570, 29958,  5664,
         11022,   555, 29879,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100],
        [ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100, 21952,   324,   953,
         13651,   529, 19570, 29958,   270,  1112, 29899,  2724],
        [ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100, 13675,  1989, 21987,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100]],
       device='cuda:0')
Separately:
label.shape: torch.Size([68])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  4047, 29895,   529, 19570, 29958,  5664,
        11022,   555, 29879,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100],
       device='cuda:0')
label.shape: torch.Size([68])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100, 21952,   324,   953,
        13651,   529, 19570, 29958,   270,  1112, 29899,  2724],
       device='cuda:0')
label.shape: torch.Size([68])
tensor([ -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100, 13675,  1989, 21987,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100],
       device='cuda:0')
Done w/ Preprocessing Logits
Evaluating with Gooogle Bleu
<transformers.trainer_utils.EvalPrediction object at 0x7fe3f07448d0>
Everything in Eval Pred:
[[[-1.4463034e+00  2.3857305e+00  1.2088633e+00 ...  8.1254035e-01
    3.3069277e-01  1.5509997e-01]
  [-8.2473726e+00 -5.5157166e+00  1.6776388e+00 ... -2.5070124e+00
   -5.0925865e+00 -1.3742551e+00]
  [-1.1357811e+01 -9.5549707e+00 -1.9141576e+00 ... -4.8352728e+00
   -7.0916619e+00 -7.4472618e+00]
  ...
  [ 1.2820711e+00  3.1557682e+01  1.5331116e+00 ... -8.2684863e-01
   -1.6324806e+00 -3.2952568e-01]
  [ 1.1803091e+00  3.1171627e+01  1.5511475e+00 ... -8.4787136e-01
   -1.6968019e+00 -3.9887330e-01]
  [ 1.1461815e+00  3.1048115e+01  1.5646980e+00 ... -8.5089499e-01
   -1.7051841e+00 -4.0389383e-01]]

 [[-1.4463034e+00  2.3857305e+00  1.2088633e+00 ...  8.1254035e-01
    3.3069277e-01  1.5509997e-01]
  [-8.2473726e+00 -5.5157166e+00  1.6776388e+00 ... -2.5070124e+00
   -5.0925865e+00 -1.3742551e+00]
  [-1.1357811e+01 -9.5549707e+00 -1.9141576e+00 ... -4.8352728e+00
   -7.0916619e+00 -7.4472618e+00]
  ...
  [ 8.0824077e-01  3.0170906e+01  1.6572421e+00 ... -9.0258789e-01
   -1.2401677e+00 -1.7921907e-01]
  [ 6.5627038e-01  2.9621248e+01  1.6335647e+00 ... -9.6157616e-01
   -1.3094248e+00 -2.6672867e-01]
  [ 5.5239642e-01  2.9292391e+01  1.6345581e+00 ... -1.0023513e+00
   -1.3723658e+00 -3.1734267e-01]]

 [[-1.4463034e+00  2.3857305e+00  1.2088633e+00 ...  8.1254035e-01
    3.3069277e-01  1.5509997e-01]
  [-8.2473726e+00 -5.5157166e+00  1.6776388e+00 ... -2.5070124e+00
   -5.0925865e+00 -1.3742551e+00]
  [-1.1357811e+01 -9.5549707e+00 -1.9141576e+00 ... -4.8352728e+00
   -7.0916619e+00 -7.4472618e+00]
  ...
  [-3.4572973e+00 -1.6888733e+00  1.0115784e+01 ... -7.5207770e-02
   -8.2955015e-01 -6.5681106e-01]
  [-6.6210403e+00 -2.7305162e+00  8.3341455e+00 ... -1.7471892e+00
   -3.4509864e+00 -2.7359881e+00]
  [-1.1571628e+01 -7.9035811e+00  5.1624427e+00 ... -5.6699924e+00
   -7.3094029e+00 -6.6854544e+00]]

 ...

 [[-1.4463041e+00  2.3857827e+00  1.2088642e+00 ...  8.1254929e-01
    3.3068871e-01  1.5510200e-01]
  [-8.2473650e+00 -5.5157366e+00  1.6776263e+00 ... -2.5070157e+00
   -5.0925932e+00 -1.3742616e+00]
  [-1.1357817e+01 -9.5549765e+00 -1.9141530e+00 ... -4.8352790e+00
   -7.0916481e+00 -7.4472628e+00]
  ...
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]]

 [[-1.4463041e+00  2.3857827e+00  1.2088642e+00 ...  8.1254929e-01
    3.3068871e-01  1.5510200e-01]
  [-8.2473650e+00 -5.5157366e+00  1.6776263e+00 ... -2.5070157e+00
   -5.0925932e+00 -1.3742616e+00]
  [-1.1357817e+01 -9.5549765e+00 -1.9141530e+00 ... -4.8352790e+00
   -7.0916481e+00 -7.4472628e+00]
  ...
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]]

 [[-1.4463041e+00  2.3857827e+00  1.2088642e+00 ...  8.1254929e-01
    3.3068871e-01  1.5510200e-01]
  [-8.2473650e+00 -5.5157366e+00  1.6776263e+00 ... -2.5070157e+00
   -5.0925932e+00 -1.3742616e+00]
  [-1.1357817e+01 -9.5549765e+00 -1.9141530e+00 ... -4.8352790e+00
   -7.0916481e+00 -7.4472628e+00]
  ...
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]]]
[[ -100  -100  -100 ...  -100  -100  -100]
 [ -100  -100  -100 ...  -100  -100  -100]
 [ -100  -100  -100 ... 29906 29947 29995]
 ...
 [ -100  -100  -100 ...  -100  -100  -100]
 [ -100  -100  -100 ...  -100  -100  -100]
 [ -100  -100  -100 ...  -100  -100  -100]]
<transformers.trainer_utils.EvalPrediction object at 0x7fe3f07448d0>
Predictions:
[[[-1.4463034e+00  2.3857305e+00  1.2088633e+00 ...  8.1254035e-01
    3.3069277e-01  1.5509997e-01]
  [-8.2473726e+00 -5.5157166e+00  1.6776388e+00 ... -2.5070124e+00
   -5.0925865e+00 -1.3742551e+00]
  [-1.1357811e+01 -9.5549707e+00 -1.9141576e+00 ... -4.8352728e+00
   -7.0916619e+00 -7.4472618e+00]
  ...
  [ 1.2820711e+00  3.1557682e+01  1.5331116e+00 ... -8.2684863e-01
   -1.6324806e+00 -3.2952568e-01]
  [ 1.1803091e+00  3.1171627e+01  1.5511475e+00 ... -8.4787136e-01
   -1.6968019e+00 -3.9887330e-01]
  [ 1.1461815e+00  3.1048115e+01  1.5646980e+00 ... -8.5089499e-01
   -1.7051841e+00 -4.0389383e-01]]

 [[-1.4463034e+00  2.3857305e+00  1.2088633e+00 ...  8.1254035e-01
    3.3069277e-01  1.5509997e-01]
  [-8.2473726e+00 -5.5157166e+00  1.6776388e+00 ... -2.5070124e+00
   -5.0925865e+00 -1.3742551e+00]
  [-1.1357811e+01 -9.5549707e+00 -1.9141576e+00 ... -4.8352728e+00
   -7.0916619e+00 -7.4472618e+00]
  ...
  [ 8.0824077e-01  3.0170906e+01  1.6572421e+00 ... -9.0258789e-01
   -1.2401677e+00 -1.7921907e-01]
  [ 6.5627038e-01  2.9621248e+01  1.6335647e+00 ... -9.6157616e-01
   -1.3094248e+00 -2.6672867e-01]
  [ 5.5239642e-01  2.9292391e+01  1.6345581e+00 ... -1.0023513e+00
   -1.3723658e+00 -3.1734267e-01]]

 [[-1.4463034e+00  2.3857305e+00  1.2088633e+00 ...  8.1254035e-01
    3.3069277e-01  1.5509997e-01]
  [-8.2473726e+00 -5.5157166e+00  1.6776388e+00 ... -2.5070124e+00
   -5.0925865e+00 -1.3742551e+00]
  [-1.1357811e+01 -9.5549707e+00 -1.9141576e+00 ... -4.8352728e+00
   -7.0916619e+00 -7.4472618e+00]
  ...
  [-3.4572973e+00 -1.6888733e+00  1.0115784e+01 ... -7.5207770e-02
   -8.2955015e-01 -6.5681106e-01]
  [-6.6210403e+00 -2.7305162e+00  8.3341455e+00 ... -1.7471892e+00
   -3.4509864e+00 -2.7359881e+00]
  [-1.1571628e+01 -7.9035811e+00  5.1624427e+00 ... -5.6699924e+00
   -7.3094029e+00 -6.6854544e+00]]

 ...

 [[-1.4463041e+00  2.3857827e+00  1.2088642e+00 ...  8.1254929e-01
    3.3068871e-01  1.5510200e-01]
  [-8.2473650e+00 -5.5157366e+00  1.6776263e+00 ... -2.5070157e+00
   -5.0925932e+00 -1.3742616e+00]
  [-1.1357817e+01 -9.5549765e+00 -1.9141530e+00 ... -4.8352790e+00
   -7.0916481e+00 -7.4472628e+00]
  ...
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]]

 [[-1.4463041e+00  2.3857827e+00  1.2088642e+00 ...  8.1254929e-01
    3.3068871e-01  1.5510200e-01]
  [-8.2473650e+00 -5.5157366e+00  1.6776263e+00 ... -2.5070157e+00
   -5.0925932e+00 -1.3742616e+00]
  [-1.1357817e+01 -9.5549765e+00 -1.9141530e+00 ... -4.8352790e+00
   -7.0916481e+00 -7.4472628e+00]
  ...
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]]

 [[-1.4463041e+00  2.3857827e+00  1.2088642e+00 ...  8.1254929e-01
    3.3068871e-01  1.5510200e-01]
  [-8.2473650e+00 -5.5157366e+00  1.6776263e+00 ... -2.5070157e+00
   -5.0925932e+00 -1.3742616e+00]
  [-1.1357817e+01 -9.5549765e+00 -1.9141530e+00 ... -4.8352790e+00
   -7.0916481e+00 -7.4472628e+00]
  ...
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]
  [-1.0000000e+02 -1.0000000e+02 -1.0000000e+02 ... -1.0000000e+02
   -1.0000000e+02 -1.0000000e+02]]]
